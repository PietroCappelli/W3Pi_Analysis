-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gen4_gen_puppi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    rnd : IN STD_LOGIC_VECTOR (33 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of gen4_gen_puppi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_352 : STD_LOGIC_VECTOR (9 downto 0) := "1101010010";
    constant ap_const_lv10_35B : STD_LOGIC_VECTOR (9 downto 0) := "1101011011";
    constant ap_const_lv10_35A : STD_LOGIC_VECTOR (9 downto 0) := "1101011010";
    constant ap_const_lv10_369 : STD_LOGIC_VECTOR (9 downto 0) := "1101101001";
    constant ap_const_lv10_368 : STD_LOGIC_VECTOR (9 downto 0) := "1101101000";
    constant ap_const_lv10_3A2 : STD_LOGIC_VECTOR (9 downto 0) := "1110100010";
    constant ap_const_lv10_3E9 : STD_LOGIC_VECTOR (9 downto 0) := "1111101001";
    constant ap_const_lv11_5DA : STD_LOGIC_VECTOR (10 downto 0) := "10111011010";
    constant ap_const_lv11_530 : STD_LOGIC_VECTOR (10 downto 0) := "10100110000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_44C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010001001100";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv22_5A0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010110100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ptLUT_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ptLUT_V_ce0 : STD_LOGIC;
    signal ptLUT_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fill_V_reg_343 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fill_V_reg_343_pp0_iter1_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal fill_V_reg_343_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal fill_V_reg_343_pp0_iter3_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_1_fu_122_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_1_reg_358 : STD_LOGIC_VECTOR (10 downto 0);
    signal charge_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal charge_reg_368_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal charge_reg_368_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal charge_reg_368_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pt_V_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal pt_V_reg_375_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal pt_V_reg_375_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ueta_reg_385 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1080_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_1_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_1_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_1_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_2_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_2_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_3_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1080_3_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_2_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_2_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_fu_109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idx_fu_95_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_fu_114_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_2_fu_126_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ueta_fu_151_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal prob_fu_160_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal prob_fu_160_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal eta_V_fu_214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal uphi_fu_223_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal uphi_fu_223_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln52_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_249_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1080_fu_238_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln56_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal id_V_1_fu_268_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal id_V_fu_256_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln63_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln63_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln66_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_fu_293_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal id_V_2_fu_275_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal id_V_3_fu_301_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_V_fu_232_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln77_fu_219_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln75_fu_211_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_322_ce : STD_LOGIC;
    signal grp_fu_329_ce : STD_LOGIC;
    signal grp_fu_336_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_322_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_329_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_336_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component gen4_mul_mul_12ns_11ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component gen4_mul_mul_10ns_10ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component gen4_mul_mul_11ns_11ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component gen4_gen_puppi_ptLUT_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ptLUT_V_U : component gen4_gen_puppi_ptLUT_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 1023,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ptLUT_V_address0,
        ce0 => ptLUT_V_ce0,
        q0 => ptLUT_V_q0);

    mul_mul_12ns_11ns_23_4_1_U1 : component gen4_mul_mul_12ns_11ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 11,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => grp_fu_322_ce,
        dout => grp_fu_322_p2);

    mul_mul_10ns_10ns_20_4_1_U2 : component gen4_mul_mul_10ns_10ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_329_p0,
        din1 => grp_fu_329_p1,
        ce => grp_fu_329_ce,
        dout => grp_fu_329_p2);

    mul_mul_11ns_11ns_22_4_1_U3 : component gen4_mul_mul_11ns_11ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_336_p0,
        din1 => grp_fu_336_p1,
        ce => grp_fu_336_ce,
        dout => grp_fu_336_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                charge_reg_368 <= rnd(21 downto 21);
                charge_reg_368_pp0_iter1_reg <= charge_reg_368;
                fill_V_reg_343 <= rnd(33 downto 10);
                fill_V_reg_343_pp0_iter1_reg <= fill_V_reg_343;
                lhs_1_reg_358 <= lhs_1_fu_122_p1;
                pt_V_reg_375 <= ptLUT_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                charge_reg_368_pp0_iter2_reg <= charge_reg_368_pp0_iter1_reg;
                charge_reg_368_pp0_iter3_reg <= charge_reg_368_pp0_iter2_reg;
                fill_V_reg_343_pp0_iter2_reg <= fill_V_reg_343_pp0_iter1_reg;
                fill_V_reg_343_pp0_iter3_reg <= fill_V_reg_343_pp0_iter2_reg;
                icmp_ln1080_1_reg_400 <= icmp_ln1080_1_fu_181_p2;
                icmp_ln1080_2_reg_410 <= icmp_ln1080_2_fu_193_p2;
                icmp_ln1080_3_reg_415 <= icmp_ln1080_3_fu_199_p2;
                icmp_ln1080_reg_390 <= icmp_ln1080_fu_169_p2;
                icmp_ln1084_1_reg_405 <= icmp_ln1084_1_fu_187_p2;
                icmp_ln1084_2_reg_420 <= icmp_ln1084_2_fu_205_p2;
                icmp_ln1084_reg_395 <= icmp_ln1084_fu_175_p2;
                pt_V_reg_375_pp0_iter2_reg <= pt_V_reg_375;
                pt_V_reg_375_pp0_iter3_reg <= pt_V_reg_375_pp0_iter2_reg;
                ueta_reg_385 <= ueta_fu_151_p1(22 downto 12);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln52_fu_245_p2 <= (icmp_ln1084_reg_395 and icmp_ln1080_reg_390);
    and_ln56_fu_264_p2 <= (icmp_ln1084_1_reg_405 and icmp_ln1080_1_reg_400);
    and_ln63_fu_283_p2 <= (icmp_ln1084_2_reg_420 and icmp_ln1080_3_reg_415);
    and_ln66_fu_297_p2 <= (icmp_ln1084_2_reg_420 and icmp_ln1080_2_reg_410);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ((((fill_V_reg_343_pp0_iter3_reg & id_V_3_fu_301_p3) & phi_V_fu_232_p2) & sext_ln77_fu_219_p1) & zext_ln75_fu_211_p1);
    eta_V_fu_214_p2 <= std_logic_vector(unsigned(ueta_reg_385) + unsigned(ap_const_lv11_5DA));

    grp_fu_322_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_322_ce <= ap_const_logic_1;
        else 
            grp_fu_322_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_322_p0 <= grp_fu_322_p00(12 - 1 downto 0);
    grp_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_114_p1),23));
    grp_fu_322_p1 <= ap_const_lv23_44C(11 - 1 downto 0);

    grp_fu_329_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_329_ce <= ap_const_logic_1;
        else 
            grp_fu_329_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_329_p0 <= grp_fu_329_p00(10 - 1 downto 0);
    grp_fu_329_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_2_fu_126_p4),20));
    grp_fu_329_p1 <= ap_const_lv20_3E8(10 - 1 downto 0);

    grp_fu_336_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_336_ce <= ap_const_logic_1;
        else 
            grp_fu_336_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_336_p0 <= grp_fu_336_p00(11 - 1 downto 0);
    grp_fu_336_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_1_reg_358),22));
    grp_fu_336_p1 <= ap_const_lv22_5A0(11 - 1 downto 0);
    icmp_ln1080_1_fu_181_p2 <= "1" when (unsigned(prob_fu_160_p4) > unsigned(ap_const_lv10_35A)) else "0";
    icmp_ln1080_2_fu_193_p2 <= "1" when (unsigned(prob_fu_160_p4) > unsigned(ap_const_lv10_368)) else "0";
    icmp_ln1080_3_fu_199_p2 <= "1" when (unsigned(prob_fu_160_p4) > unsigned(ap_const_lv10_3A2)) else "0";
    icmp_ln1080_fu_169_p2 <= "1" when (unsigned(prob_fu_160_p4) > unsigned(ap_const_lv10_352)) else "0";
    icmp_ln1084_1_fu_187_p2 <= "1" when (unsigned(prob_fu_160_p4) < unsigned(ap_const_lv10_369)) else "0";
    icmp_ln1084_2_fu_205_p2 <= "1" when (unsigned(prob_fu_160_p4) < unsigned(ap_const_lv10_3E9)) else "0";
    icmp_ln1084_fu_175_p2 <= "1" when (unsigned(prob_fu_160_p4) < unsigned(ap_const_lv10_35B)) else "0";
    id_V_1_fu_268_p3 <= 
        ap_const_lv3_4 when (charge_reg_368_pp0_iter3_reg(0) = '1') else 
        ap_const_lv3_5;
    id_V_2_fu_275_p3 <= 
        id_V_1_fu_268_p3 when (and_ln56_fu_264_p2(0) = '1') else 
        id_V_fu_256_p3;
    id_V_3_fu_301_p3 <= 
        zext_ln66_fu_293_p1 when (and_ln66_fu_297_p2(0) = '1') else 
        id_V_2_fu_275_p3;
    id_V_fu_256_p3 <= 
        select_ln52_fu_249_p3 when (and_ln52_fu_245_p2(0) = '1') else 
        select_ln1080_fu_238_p3;
    idx_fu_95_p1 <= rnd(10 - 1 downto 0);
    lhs_1_fu_122_p1 <= rnd(11 - 1 downto 0);
    lhs_2_fu_126_p4 <= rnd(20 downto 11);
    lhs_fu_114_p1 <= rnd(12 - 1 downto 0);
    phi_V_fu_232_p2 <= std_logic_vector(unsigned(uphi_fu_223_p4) + unsigned(ap_const_lv11_530));
    prob_fu_160_p1 <= grp_fu_329_p2;
    prob_fu_160_p4 <= prob_fu_160_p1(19 downto 10);
    ptLUT_V_address0 <= zext_ln587_fu_109_p1(10 - 1 downto 0);

    ptLUT_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ptLUT_V_ce0 <= ap_const_logic_1;
        else 
            ptLUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1080_fu_238_p3 <= 
        ap_const_lv3_2 when (charge_reg_368_pp0_iter3_reg(0) = '1') else 
        ap_const_lv3_3;
    select_ln52_fu_249_p3 <= 
        ap_const_lv3_6 when (charge_reg_368_pp0_iter3_reg(0) = '1') else 
        ap_const_lv3_7;
        sext_ln77_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(eta_V_fu_214_p2),12));

    ueta_fu_151_p1 <= grp_fu_322_p2;
    uphi_fu_223_p1 <= grp_fu_336_p2;
    uphi_fu_223_p4 <= uphi_fu_223_p1(21 downto 11);
    xor_ln63_fu_287_p2 <= (ap_const_lv1_1 xor and_ln63_fu_283_p2);
    zext_ln587_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_95_p1),64));
    zext_ln66_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln63_fu_287_p2),3));
    zext_ln75_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pt_V_reg_375_pp0_iter3_reg),14));
end behav;
