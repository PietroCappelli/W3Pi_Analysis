// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gen4_gen_puppi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        rnd,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [33:0] rnd;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] ptLUT_V_address0;
reg    ptLUT_V_ce0;
wire   [7:0] ptLUT_V_q0;
reg   [23:0] fill_V_reg_343;
wire    ap_block_pp0_stage0_11001;
reg   [23:0] fill_V_reg_343_pp0_iter1_reg;
reg   [23:0] fill_V_reg_343_pp0_iter2_reg;
reg   [23:0] fill_V_reg_343_pp0_iter3_reg;
wire   [10:0] lhs_1_fu_122_p1;
reg   [10:0] lhs_1_reg_358;
reg   [0:0] charge_reg_368;
reg   [0:0] charge_reg_368_pp0_iter1_reg;
reg   [0:0] charge_reg_368_pp0_iter2_reg;
reg   [0:0] charge_reg_368_pp0_iter3_reg;
reg   [7:0] pt_V_reg_375;
reg   [7:0] pt_V_reg_375_pp0_iter2_reg;
reg   [7:0] pt_V_reg_375_pp0_iter3_reg;
reg   [10:0] ueta_reg_385;
wire   [0:0] icmp_ln1080_fu_169_p2;
reg   [0:0] icmp_ln1080_reg_390;
wire   [0:0] icmp_ln1084_fu_175_p2;
reg   [0:0] icmp_ln1084_reg_395;
wire   [0:0] icmp_ln1080_1_fu_181_p2;
reg   [0:0] icmp_ln1080_1_reg_400;
wire   [0:0] icmp_ln1084_1_fu_187_p2;
reg   [0:0] icmp_ln1084_1_reg_405;
wire   [0:0] icmp_ln1080_2_fu_193_p2;
reg   [0:0] icmp_ln1080_2_reg_410;
wire   [0:0] icmp_ln1080_3_fu_199_p2;
reg   [0:0] icmp_ln1080_3_reg_415;
wire   [0:0] icmp_ln1084_2_fu_205_p2;
reg   [0:0] icmp_ln1084_2_reg_420;
wire   [63:0] zext_ln587_fu_109_p1;
wire    ap_block_pp0_stage0;
wire   [9:0] idx_fu_95_p1;
wire   [11:0] lhs_fu_114_p1;
wire   [9:0] lhs_2_fu_126_p4;
wire   [22:0] ueta_fu_151_p1;
wire  signed [22:0] grp_fu_322_p2;
wire   [19:0] prob_fu_160_p1;
wire  signed [19:0] grp_fu_329_p2;
wire   [9:0] prob_fu_160_p4;
wire   [10:0] eta_V_fu_214_p2;
wire   [21:0] uphi_fu_223_p1;
wire  signed [21:0] grp_fu_336_p2;
wire   [10:0] uphi_fu_223_p4;
wire   [0:0] and_ln52_fu_245_p2;
wire   [2:0] select_ln52_fu_249_p3;
wire   [2:0] select_ln1080_fu_238_p3;
wire   [0:0] and_ln56_fu_264_p2;
wire   [2:0] id_V_1_fu_268_p3;
wire   [2:0] id_V_fu_256_p3;
wire   [0:0] and_ln63_fu_283_p2;
wire   [0:0] xor_ln63_fu_287_p2;
wire   [0:0] and_ln66_fu_297_p2;
wire   [2:0] zext_ln66_fu_293_p1;
wire   [2:0] id_V_2_fu_275_p3;
wire   [2:0] id_V_3_fu_301_p3;
wire   [10:0] phi_V_fu_232_p2;
wire  signed [11:0] sext_ln77_fu_219_p1;
wire   [13:0] zext_ln75_fu_211_p1;
wire   [11:0] grp_fu_322_p0;
wire   [10:0] grp_fu_322_p1;
wire   [9:0] grp_fu_329_p0;
wire   [9:0] grp_fu_329_p1;
wire   [10:0] grp_fu_336_p0;
wire   [10:0] grp_fu_336_p1;
reg    grp_fu_322_ce;
reg    grp_fu_329_ce;
reg    grp_fu_336_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [22:0] grp_fu_322_p00;
wire   [19:0] grp_fu_329_p00;
wire   [21:0] grp_fu_336_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

gen4_gen_puppi_ptLUT_V_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 1023 ),
    .AddressWidth( 10 ))
ptLUT_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ptLUT_V_address0),
    .ce0(ptLUT_V_ce0),
    .q0(ptLUT_V_q0)
);

gen4_mul_mul_12ns_11ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 23 ))
mul_mul_12ns_11ns_23_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .ce(grp_fu_322_ce),
    .dout(grp_fu_322_p2)
);

gen4_mul_mul_10ns_10ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 20 ))
mul_mul_10ns_10ns_20_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_329_p0),
    .din1(grp_fu_329_p1),
    .ce(grp_fu_329_ce),
    .dout(grp_fu_329_p2)
);

gen4_mul_mul_11ns_11ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
mul_mul_11ns_11ns_22_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_336_p0),
    .din1(grp_fu_336_p1),
    .ce(grp_fu_336_ce),
    .dout(grp_fu_336_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        charge_reg_368 <= rnd[32'd21];
        charge_reg_368_pp0_iter1_reg <= charge_reg_368;
        fill_V_reg_343 <= {{rnd[33:10]}};
        fill_V_reg_343_pp0_iter1_reg <= fill_V_reg_343;
        lhs_1_reg_358 <= lhs_1_fu_122_p1;
        pt_V_reg_375 <= ptLUT_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        charge_reg_368_pp0_iter2_reg <= charge_reg_368_pp0_iter1_reg;
        charge_reg_368_pp0_iter3_reg <= charge_reg_368_pp0_iter2_reg;
        fill_V_reg_343_pp0_iter2_reg <= fill_V_reg_343_pp0_iter1_reg;
        fill_V_reg_343_pp0_iter3_reg <= fill_V_reg_343_pp0_iter2_reg;
        icmp_ln1080_1_reg_400 <= icmp_ln1080_1_fu_181_p2;
        icmp_ln1080_2_reg_410 <= icmp_ln1080_2_fu_193_p2;
        icmp_ln1080_3_reg_415 <= icmp_ln1080_3_fu_199_p2;
        icmp_ln1080_reg_390 <= icmp_ln1080_fu_169_p2;
        icmp_ln1084_1_reg_405 <= icmp_ln1084_1_fu_187_p2;
        icmp_ln1084_2_reg_420 <= icmp_ln1084_2_fu_205_p2;
        icmp_ln1084_reg_395 <= icmp_ln1084_fu_175_p2;
        pt_V_reg_375_pp0_iter2_reg <= pt_V_reg_375;
        pt_V_reg_375_pp0_iter3_reg <= pt_V_reg_375_pp0_iter2_reg;
        ueta_reg_385 <= {{ueta_fu_151_p1[22:12]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_322_ce = 1'b1;
    end else begin
        grp_fu_322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_329_ce = 1'b1;
    end else begin
        grp_fu_329_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ptLUT_V_ce0 = 1'b1;
    end else begin
        ptLUT_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln52_fu_245_p2 = (icmp_ln1084_reg_395 & icmp_ln1080_reg_390);

assign and_ln56_fu_264_p2 = (icmp_ln1084_1_reg_405 & icmp_ln1080_1_reg_400);

assign and_ln63_fu_283_p2 = (icmp_ln1084_2_reg_420 & icmp_ln1080_3_reg_415);

assign and_ln66_fu_297_p2 = (icmp_ln1084_2_reg_420 & icmp_ln1080_2_reg_410);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = {{{{{fill_V_reg_343_pp0_iter3_reg}, {id_V_3_fu_301_p3}}, {phi_V_fu_232_p2}}, {sext_ln77_fu_219_p1}}, {zext_ln75_fu_211_p1}};

assign eta_V_fu_214_p2 = ($signed(ueta_reg_385) + $signed(11'd1498));

assign grp_fu_322_p0 = grp_fu_322_p00;

assign grp_fu_322_p00 = lhs_fu_114_p1;

assign grp_fu_322_p1 = 23'd1100;

assign grp_fu_329_p0 = grp_fu_329_p00;

assign grp_fu_329_p00 = lhs_2_fu_126_p4;

assign grp_fu_329_p1 = 20'd1000;

assign grp_fu_336_p0 = grp_fu_336_p00;

assign grp_fu_336_p00 = lhs_1_reg_358;

assign grp_fu_336_p1 = 22'd1440;

assign icmp_ln1080_1_fu_181_p2 = ((prob_fu_160_p4 > 10'd858) ? 1'b1 : 1'b0);

assign icmp_ln1080_2_fu_193_p2 = ((prob_fu_160_p4 > 10'd872) ? 1'b1 : 1'b0);

assign icmp_ln1080_3_fu_199_p2 = ((prob_fu_160_p4 > 10'd930) ? 1'b1 : 1'b0);

assign icmp_ln1080_fu_169_p2 = ((prob_fu_160_p4 > 10'd850) ? 1'b1 : 1'b0);

assign icmp_ln1084_1_fu_187_p2 = ((prob_fu_160_p4 < 10'd873) ? 1'b1 : 1'b0);

assign icmp_ln1084_2_fu_205_p2 = ((prob_fu_160_p4 < 10'd1001) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_175_p2 = ((prob_fu_160_p4 < 10'd859) ? 1'b1 : 1'b0);

assign id_V_1_fu_268_p3 = ((charge_reg_368_pp0_iter3_reg[0:0] == 1'b1) ? 3'd4 : 3'd5);

assign id_V_2_fu_275_p3 = ((and_ln56_fu_264_p2[0:0] == 1'b1) ? id_V_1_fu_268_p3 : id_V_fu_256_p3);

assign id_V_3_fu_301_p3 = ((and_ln66_fu_297_p2[0:0] == 1'b1) ? zext_ln66_fu_293_p1 : id_V_2_fu_275_p3);

assign id_V_fu_256_p3 = ((and_ln52_fu_245_p2[0:0] == 1'b1) ? select_ln52_fu_249_p3 : select_ln1080_fu_238_p3);

assign idx_fu_95_p1 = rnd[9:0];

assign lhs_1_fu_122_p1 = rnd[10:0];

assign lhs_2_fu_126_p4 = {{rnd[20:11]}};

assign lhs_fu_114_p1 = rnd[11:0];

assign phi_V_fu_232_p2 = ($signed(uphi_fu_223_p4) + $signed(11'd1328));

assign prob_fu_160_p1 = grp_fu_329_p2;

assign prob_fu_160_p4 = {{prob_fu_160_p1[19:10]}};

assign ptLUT_V_address0 = zext_ln587_fu_109_p1;

assign select_ln1080_fu_238_p3 = ((charge_reg_368_pp0_iter3_reg[0:0] == 1'b1) ? 3'd2 : 3'd3);

assign select_ln52_fu_249_p3 = ((charge_reg_368_pp0_iter3_reg[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign sext_ln77_fu_219_p1 = $signed(eta_V_fu_214_p2);

assign ueta_fu_151_p1 = grp_fu_322_p2;

assign uphi_fu_223_p1 = grp_fu_336_p2;

assign uphi_fu_223_p4 = {{uphi_fu_223_p1[21:11]}};

assign xor_ln63_fu_287_p2 = (1'd1 ^ and_ln63_fu_283_p2);

assign zext_ln587_fu_109_p1 = idx_fu_95_p1;

assign zext_ln66_fu_293_p1 = xor_ln63_fu_287_p2;

assign zext_ln75_fu_211_p1 = pt_V_reg_375_pp0_iter3_reg;

endmodule //gen4_gen_puppi
