-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity gen4_gen_puppi_ptLUT_V_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 10; 
             AddressRange    : integer := 1023
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of gen4_gen_puppi_ptLUT_V_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 to 181=> "00001000", 182 to 378=> "00001001", 379 to 517=> "00001010", 518 to 617=> "00001011", 
    618 to 688=> "00001100", 689 to 741=> "00001101", 742 to 780=> "00001110", 781 to 810=> "00001111", 
    811 to 833=> "00010000", 834 to 851=> "00010001", 852 to 865=> "00010010", 866 to 877=> "00010011", 
    878 to 886=> "00010100", 887 to 894=> "00010101", 895 to 901=> "00010110", 902 to 906=> "00010111", 
    907 to 911=> "00011000", 912 to 916=> "00011001", 917 to 919=> "00011010", 920 to 923=> "00011011", 
    924 to 926=> "00011100", 927 to 928=> "00011101", 929 to 931=> "00011110", 932 to 933=> "00011111", 
    934 to 935=> "00100000", 936 to 937=> "00100001", 938 to 939=> "00100010", 940 to 941=> "00100011", 
    942 => "00100100", 943 to 944=> "00100101", 945 => "00100110", 946 => "00100111", 
    947 to 948=> "00101000", 949 => "00101001", 950 => "00101010", 951 to 952=> "00101011", 
    953 => "00101100", 954 => "00101101", 955 => "00101110", 956 => "00101111", 
    957 => "00110000", 958 to 959=> "00110001", 960 => "00110011", 961 => "00110100", 
    962 => "00110101", 963 => "00110110", 964 => "00110111", 965 => "00111000", 
    966 => "00111001", 967 => "00111010", 968 => "00111011", 969 => "00111100", 
    970 => "00111110", 971 => "00111111", 972 => "01000000", 973 => "01000001", 
    974 => "01000011", 975 => "01000100", 976 => "01000101", 977 => "01000111", 
    978 => "01001000", 979 => "01001010", 980 => "01001011", 981 => "01001101", 
    982 => "01001110", 983 => "01010000", 984 => "01010001", 985 => "01010011", 
    986 => "01010101", 987 => "01010110", 988 => "01011000", 989 => "01011010", 
    990 => "01011011", 991 => "01011101", 992 => "01011111", 993 => "01100001", 
    994 => "01100011", 995 => "01100101", 996 => "01100110", 997 => "01101000", 
    998 => "01101010", 999 => "01101100", 1000 => "01101110", 1001 => "01110001", 
    1002 => "01110011", 1003 => "01110101", 1004 => "01110111", 1005 => "01111001", 
    1006 => "01111011", 1007 => "01111110", 1008 => "10000000", 1009 => "10000011", 
    1010 => "10000110", 1011 => "10001000", 1012 => "10001100", 1013 => "10001110", 
    1014 => "10010010", 1015 => "10010101", 1016 => "10011010", 1017 => "10011110", 
    1018 => "10100011", 1019 => "10101001", 1020 => "10110001", 1021 => "10111010", 
    1022 => "11000100" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

